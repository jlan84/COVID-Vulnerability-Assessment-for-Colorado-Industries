import pandas as pd
import numpy as np
import matplotlib.pyplot as plt



def values_to_column(df, lst, value, read_col_num, write_col_num):
    """
    Adds values to new column based on the old column
    
    Parameters:
    
    df: (dataframe)
    lst: (list) of values to check in the old column
    value = value in new column for list of values
    read_col_num: (int) column number being read
    write_col_num: (int) column number being written to 
    
    Returns:
    Adds values in the specified column based on the parameters

    """
    for i in range(df.shape[0]):
        if df.iloc[i, read_col_num] in lst:
            df.iloc[i, write_col_num] = value 

def create_df(row_list, col_list):
    """
    Creates a new df from a list of lists

    Parameters:

    row_lists: (list) list of lists containing the rows for each column
    col_list: (list) contains the names of each column

    Returns:

    A new df with row_list as rows and col_list as column names
    """
    dic = {}
    for i in range(len(row_list)):
        dic[col_list[i]] = row_list[i]
    return pd.DataFrame.from_dict(dic, orient='index').transpose()


# def create_group(df, col_name, method):
#     group = df.groupby[col_name].method
#     return group

def make_bar_plot(ax, df, col_name, labels, title):
    plt.rcParams['axes.labelsize'] = 2
    tick_loc = np.arange(len(df[labels]))
    xlabel = df.loc[:, labels]
    ax.bar(tick_loc, df[col_name])
    ax.set_xticks(ticks=tick_loc)
    ax.set_xticklabels([str(x) for x in xlabel], rotation= 90, fontsize=10)
    ax.set_title(title, fontsize=14)
    
def make_hist_plot(ax, df, col_name, bins, title):
    ax.hist(df[col_name], bins=bins)
    ax.set_xlabel(col_name)
    ax.set_title(title, fontsize=14)



if __name__ == '__main__':

    rows = [[1,5,8,10], [3,4,2], [1,2,3,4]]
    col = ['a', 'b', 'c']
    df = create_df(rows, col)
    print(df)    





# settingTypeList = covidWeeklyDF['Setting type'].unique()
# pd.DataFrame(settingTypeList).to_csv('../data/setting-types.csv')
# otherSetting = covidWeeklyDF['If setting type is other, specify'].unique()
# pd.DataFrame(otherSetting).to_csv('../data/other-setting-types.csv')
# nanValues = covidWeeklyDF[covidWeeklyDF['If setting type is other, specify'] == 'nan']
# print(nanValues.info())
# counties = covidWeeklyDF['Colorado county (exposure location)'].unique()
# countyGroup = covidWeeklyDF.groupby('Colorado county (exposure location)').sum().copy().reset_index()



# fig, ax = plt.subplots(figsize=(12,12))
# tickLoc = np.arange(len(counties))
# xLabel = countyGroup.iloc[:, 0]
# ax.bar(tickLoc, countyGroup['Number of COVID-19 deaths (lab confirmed/confirmed)'])
# ax.set_xticks(ticks=tickLoc)
# ax.set_xticklabels([str(x) for x in xLabel], rotation=90)
# ax.set_title('Lab Confirmed Deaths by County', fontsize=25)
# ax.set_ylabel('Deaths', fontsize=18)




# plt.show()

# settingTypeGrp = covidWeeklyDF.groupby('Setting type').sum().copy().reset_index()

# print(settingTypeGrp.info())

# fig, ax = plt.subplots(figsize=(12,15))
# tickLoc = np.arange(len(settingTypeGrp.iloc[:,0]))
# xLabel = settingTypeGrp.iloc[:, 0]
# ax.bar(tickLoc, settingTypeGrp['Number of COVID-19 deaths (lab confirmed/confirmed)'])
# ax.set_xticks(ticks=tickLoc)
# ax.set_xticklabels([str(x) for x in xLabel], rotation=90)
# ax.set_title('Lab Confirmed Deaths by Setting', fontsize=25)
# ax.set_ylabel('Deaths', fontsize=18)

# plt.show()

# x = covidWeeklyDF.columns.values.tolist()
# for val in x:
#     print(val)


