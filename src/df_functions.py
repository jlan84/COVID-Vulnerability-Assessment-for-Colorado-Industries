import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns



def values_to_column(df, lst, value, read_col_num, write_col_num):
    """
    Adds values to new column based on the old column
    
    Parameters:
    
    df: (dataframe)
    lst: (list) of values to check in the old column
    value = value in new column for list of values
    read_col_num: (int) column number being read
    write_col_num: (int) column number being written to 
    
    Returns:
    Adds values in the specified column based on the parameters

    """
    for i in range(df.shape[0]):
        if df.iloc[i, read_col_num] in lst:
            df.iloc[i, write_col_num] = value 

def create_df(row_list, col_list):
    """
    Creates a new df from a list of lists

    Parameters:

    row_lists: (list) list of lists containing the rows for each column
    col_list: (list) contains the names of each column

    Returns:

    A new df with row_list as rows and col_list as column names
    """
    dic = {}
    for i in range(len(row_list)):
        dic[col_list[i]] = row_list[i]
    return pd.DataFrame.from_dict(dic, orient='index').transpose()

def add_column(df, dic, reference_col, new_col, ref_loc, new_loc):
    """
    Adds a new column with the specified values from the dictionary
    based of the key from the reference column

    Parameters:
    df: DataFrame
    dic: Dictionary that contains the key value pairs to be referenced and added
    reference_col: String that contains the name of the refernce column
    new_col: String with the name of the new column to be added
    ref_loc: Integer with the index location of the reference column
    new_loc: Integer with the index locaiton of the new column

    Returns:
    A modified dictionary with values in the new column based of the keys in the refernce
    column
    """
    df.insert(loc=new_loc, column=new_col, value='')
    for i in range(len(df[reference_col])):
        df.iloc[i , new_loc] = dic[df.iloc[i, ref_loc]]

def convert_to_dict(df, loc1, loc2):
    """
    Converts two colums in a dataframe to a key value pair in a dictionary

    Parameters:
    df: DataFrame
    loc1: Integer index for the key column
    loc2: Integer index for the value column

    Returns:
    Dictionary with keys from col1 and values from col2
    """
    
    dic = {}
    for i in range(len(df.iloc[: , loc1])):
        dic[df.iloc[i, loc1]] = df.iloc[i, loc2]
    return dic

def autolabel(rects):
    """Attach a text label above each bar in *rects*, displaying its height."""
    for rect in rects:
        height = rect.get_height()
        ax.annotate('{}'.format(height),
                    xy=(rect.get_x() + rect.get_width() / 2, height),
                    xytext=(0, 3),  # 3 points vertical offset
                    textcoords="offset points",
                    ha='center', va='bottom')

def make_colors(color, n):
    """
    Returns a list of length n with the specifed color

    Parameters:
    color = str that you want as a color
    n = length of the list

    Returns:
    List of length n with color assigned to each index
    """
    colors = []
    for i in range(n):
        colors.append(color)
    return colors

def make_sns_bar_plot(ax, df, col_name, labels, title, color='blue', label=None):
    """
    Creates a seaborn bar plot

    Parameters:
    ax = axes for the plot
    df = dataframe for the data
    col_name = str name of the dataframe column for the heights
    labels = str name of the dataframe column for the x axis labels
    color = color for the bars in the graph
    label = label the graph

    Returns:
    Bar plot
    """
    
    plt.rcParams['axes.labelsize'] = 2
    tick_loc = np.arange(len(df[labels]))
    xlabel = df.loc[:, labels]
    sns.barplot(tick_loc, df[col_name], color=color, ax=ax, label=label)
    ax.set_xticks(ticks=tick_loc)
    ax.set_xticklabels([str(x) for x in xlabel], rotation= 45, fontsize=14, 
                        horizontalalignment='right')
    ax.set_title(title, fontsize=20)

def make_bar_plot(ax, df, col_name, labels, title, color='blue', label=None):
    """
    Creates a matplotlib bar plot

    Parameters:
    ax = axes for the plot
    df = dataframe for the data
    col_name = str name of the dataframe column for the heights
    labels = str name of the dataframe column for the x axis labels
    color = color for the bars in the graph
    label = label the graph

    Returns:
    Bar plot
    """
    tick_loc = np.arange(len(df[labels]))
    xlabel = df.loc[:, labels]
    ax.bar(tick_loc, df[col_name], color=color, label=label)
    ax.set_xticks(ticks=tick_loc)
    ax.set_xticklabels([str(x) for x in xlabel], rotation= 80, fontsize=14)
    ax.set_title(title, fontsize=20)

def make_scatter_plot(ax, x, y, title, color):
    """
    Creates a matplotlib scatter plot

    Parameters:
    ax = axes for the plot
    x = array for the x values
    y = array for the y values
    color = color for the points in the graph

    Returns:
    scatter plot
    """
    ax.scatter(x=x, y=y, s=100, c=color)
    ax.set_title(title, fontsize=20)


if __name__ == '__main__':
    pass