import pandas as pd
import numpy as np
from df_functions import *





execute = True
if __name__ == "__main__" and execute:
    
    # This section is the data cleaning and funneling performed, please reference the README.md for more
    #information

    # Data Cleaning Workflow Step 1
    df = pd.read_csv('../data/COVID-Data.csv')


    covidWeeklyDF = df.copy()
    covidWeeklyDF.insert(loc=5, column='Industry', value='')
    covidWeeklyDF.dropna(how='all',axis=1, inplace=True)
    covidWeeklyDF['Colorado county (exposure location)'].replace("Colorado", "Clear Creek", inplace=True)
    covidWeeklyDF.rename(columns={'Colorado county (exposure location)':'CTYNAME'}, inplace=True)
    covidWeeklyDF['CTYNAME'] = covidWeeklyDF['CTYNAME'].str.strip()

    AFFH = ['Farm/dairy', 'Agriculture', 'Gathering']

    mining_og = ['Coal Mine']

    utilities = []

    manufacturing = ['Wood Pallet Manufacturer', 'Industry', 'Manufacturing', 'Dairy Plant',
                    'Beverage Bottling Plant', 'Meat Processing', 'Manufacturing/Retail',
                    'Meat Packing Plant', 'Manufacturing ', 'Frozen food manufacturing',
                    'Food Manufacturer', 'Food Manufacturing', 'Factory', 'Food Packaging Industry',
                    'Slaughterhouse/Meat packing plant', 'Manufactured foods facility', 
                    'Meat Processing Plant (Lamb)', 'Manufacturer (Hand Sanitizer)', 'Dog Food Plant',
                    'Potato Processing Plant', 'Poultry Processing Center', 'Commercial Bakery',
                    'Meat Processing Plant', 'Food manufacturing', 'Food Manufacturer ',
                    'Agricultural and Manufactured food facility']

    government = ['Prison/jail', 'Correctional facility', 'Community Corrections']

    construction = ['Construction Site', 'Construction', 'Construction site', 'construction site', 
                    'Construction', 'House Painting Business', 'Tile/Construction',
                    'Construction company', 'Lumber/Construction ', 'Gutters']

    comminfo = []

    retail_wholesale = ['Grocery store', 'Retail', 'Store', 'Tile Company; Industry','Thrift store',
                    'Home Improvement Retailer', 'Home improvement retailer', 'Traffic safety equipment supplier company',
                    'Car dealership ', 'Building materials supplier', 'Produce Wholesale Warehouse']

    transp_warehouse = ['Distribution', 'Distribution Center', 'Potato Warehouse', 'Factory/Warehouse',
                        'Food distributor', 'Warehouse Distribution', 'Produce Repack Warehouse/Distribution',
                        'Pipe distributor', 'Food Distribution', 'Warehouse', 'Mail distribution center']

    prof_serv_mgmt = ['Maintenance Services', 'Waste management', 'Electrical Contractor',
                    'Distribution/Marketing Service', 'Landscaping company', 'Office/indoor workspace', 
                    'Bridge Tournament ', 'Cleaning Company', 'Fencing company', 'Landscaping', 
                    'Environmental Laboratory', 'THC Laboratory', 
                    'Provides parts and technical assistance for rebar processing machines',
                    'Airport operations/support','Laundry Services', 'Laundry Services', 'Steam Laundry',]

    fin_ins_rs = ['Bank']

    HC_SA = ['Child care center', 'Healthcare, assisted living residence', 'Healthcare, skilled nursing facility',
            'Healthcare, combined care', 'Healthcare other', 'Healthcare, outpatient', 'Independent Living Facility',
            'Group home', 'Healthcare, dialysis', 'Residential Care Facility',
            'Personal Care Alternative (PCA) staffed apartment', 'Congregate shelter','OBGYN Clinic',
            'Opioid Treatment Facility', 'Shelter', 'Adult group home', 'Rehab center',
            'Inpatient rehabilitation', 'Hospice ', 'Assisted living and memory care', 'Dental Office',
            'Behavioral health', 'Rehab and Senior Living', 'Homeless shelter', 'assisted living and memory care',
            'Community correctional facility', 'Rehab ', 'Skilled nursing, continuing care retirement community',
            'Youth shelter', 'Assisted living & independent living ', 'Inpatient psychiatry',
            'Educational Program', 'University']

    hospitality = ['Restaurant  fast food', 'Hotel/lodge/resort', 'Restaurant sit down',
                'Restaurant other or unknown type', 'Beauty Salon', 'Camp', 'Pool/water park', 
                'Hot Spring/Spa', 'Bakery ', 'Bakery', 'Restaurant/Adult Entertainment',
                'Ice Cream', 'Copper Mountain Employee Housing', 'Recreation Facility and Restaurant',
                ]

    other_service = ['Workplace, no store front, in homes']

    industries = ['Agg/Fish/Forestry/Hunting', 'Mining/OilandGas', 'Utilities',
                'Manufacturing', 'Government', 'Construction', 
                'Comm/Info', 'Wholesale/Retail', 'Transp/Warehouse', 'Prof Serv and Mgmt',
                'Financial Activities', 'Education/Health Services', 'Hospitality','Other Services']

    industry_lists = [AFFH, mining_og, utilities, manufacturing, government, construction, comminfo, 
                    retail_wholesale, transp_warehouse, prof_serv_mgmt, fin_ins_rs, HC_SA,  
                    hospitality, other_service]

    for i in range(len(industries)):
        values_to_column(covidWeeklyDF, industry_lists[i], industries[i], 3, 5)
    for i in range(len(industries)):
        values_to_column(covidWeeklyDF, industry_lists[i], industries[i], 4, 5)

    # Data Cleaning Workflow Step 2

    salaries_dic = {}
    salaries_list = [32900,76300,66200,55000,58100,44600,66400,35500,49300,75600,57300,45600,
                    26600,36300]

    for i in range(len(salaries_list)):
        salaries_dic[industries[i]] = salaries_list[i]

    add_column(covidWeeklyDF, salaries_dic, 'Industry', 'Median Salary', 5, 6)



    # Data Cleaning Workflow Step 3

    df2 = pd.read_csv('../data/wealth-and-health-by-county.csv', header=1, nrows=64)
    df2.dropna(how='all', axis=1, inplace=True)
    df2['Ratio_Hispanic_Pop'] = df2['Perc_Hispanic_Pop'].str.rstrip('%').astype('float') / 100.0

    hispanic_pop_by_county_df = df2[['CTYNAME', 'Ratio_Hispanic_Pop']].copy()
    hispanic_pop_by_county_df['Perc_Hispanic_Pop'] = hispanic_pop_by_county_df['Ratio_Hispanic_Pop']*100
    hispanic_pop_by_county_df['CTYNAME'] = hispanic_pop_by_county_df['CTYNAME'].str.rstrip()

    pop_dic = convert_to_dict(hispanic_pop_by_county_df, 0, 2)
    add_column(covidWeeklyDF, pop_dic,'CTYNAME', 'Hispanic Population Percentage', 7,8)



    covidWeeklyDF['Total Staff Infected'] = (covidWeeklyDF['Number of staff who are positive for COVID-19 (lab confirmed)'] +
                                covidWeeklyDF['Number of staff with probable COVID-19 (NOT lab confirmed)'])

    # covidWeeklyDF.to_csv('../data/good_clean_data.csv')


    # Data Cleaning Workflow Step 4

    df3 = pd.read_csv('../data/US_Workers.csv', header=3,)
    covidWeeklyDF_Reduced = covidWeeklyDF[['Industry', 'CTYNAME', 'Hispanic Population Percentage']]
    merge_US_CO = covidWeeklyDF_Reduced.merge(df3, how='left', on='Industry')

    merge_US_CO.to_csv('../data/US_CO_merger.csv')

    df4 = pd.read_csv('../data/US_CO_merger.csv')

    df4.rename(columns={'Hispanic\nor Latino': 'Hispanic Percentage'}, inplace=True)

    employed_hispanics = df4[['Industry', 'Hispanic Percentage']].copy()

    employed_hispanics_industry_group = employed_hispanics.groupby('Industry').mean().copy().reset_index()


    # Data Cleaning Workflow Step 5

    Industry_Group = pd.read_csv('../data/good_clean_data.csv')
    Industry_Group = Industry_Group.groupby('Industry').sum().reset_index()

    Industry_Group = Industry_Group[['Industry', "Total Staff Infected"]]
    merger = Industry_Group.merge(employed_hispanics_industry_group, how='inner',  on='Industry')
    merger['Hispanic Staff Infected'] = merger['Total Staff Infected'] * merger['Hispanic Percentage']/100
        
    merger['Hispanic Staff Infected'] = merger['Hispanic Staff Infected'].round(0)

    # merger.to_csv('../data/Hispanic_Staff_Infected_by_Industry.csv')

    # Data Cleaning Workflow Step 6

    county_infection_group = covidWeeklyDF.groupby('CTYNAME').sum().copy().reset_index()
    county_infection_group.sort_values('Total Staff Infected', ascending=False, inplace=True)
    county_infection_group_filtered = county_infection_group[['CTYNAME',
                                                            'Total Staff Infected']]

    merge_hispPop_Infection = county_infection_group_filtered.merge(hispanic_pop_by_county_df, 
                                                                    how='inner', on='CTYNAME')

    # merge_hispPop_Infection.to_csv('../data/His_Pop_Infection_Merge.csv')