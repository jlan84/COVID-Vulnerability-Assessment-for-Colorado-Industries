import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from df_functions import *

plt.style.use('fivethirtyeight')

# read in data
df = pd.read_csv('../data/COVID-Data.csv')

# copy data to new datafram and insert columns/drop 0 value columns
covidWeeklyDF = df.copy()
covidWeeklyDF.insert(loc=5, column='Industry', value='')
covidWeeklyDF.dropna(how='all',axis=1, inplace=True)
# print(covidWeeklyDF.info())

# Declare variables for new Industry column
AFFH = ['Farm/dairy', 'Agriculture', 'Gathering']

mining_og = ['Coal Mine']

utilities = []

manufacturing = ['Wood Pallet Manufacturer', 'Industry', 'Manufacturing', 'Dairy Plant',
                'Beverage Bottling Plant', 'Meat Processing', 'Manufacturing/Retail',
                'Meat Packing Plant', 'Manufacturing ', 'Frozen food manufacturing',
                'Food Manufacturer', 'Food Manufacturing', 'Factory', 'Food Packaging Industry',
                'Slaughterhouse/Meat packing plant', 'Manufactured foods facility', 
                'Meat Processing Plant (Lamb)', 'Manufacturer (Hand Sanitizer)', 'Building materials supplier',
                'Dog Food Plant', 'Potato Processing Plant', 'Poultry Processing Center', 'Commercial Bakery',
                'Meat Processing Plant', 'Food manufacturing', 'Food Manufacturer ']

government = ['Prison/jail', 'Correctional facility', 'Community Corrections']

construction = ['Construction Site', 'Construction', 'Construction site', 'construction site', 'Construction',
                'Tile/Construction', 'Construction company', 'Lumber/Construction ']

comminfo = []

wholsale_trade = ['Produce Wholesale Warehouse']

retail_trade = ['Grocery store', 'Retail', 'Store', 'Tile Company; Industry','Thrift store',
                'Home Improvement Retailer', 'Home improvement retailer', 'Traffic safety equipment supplier company',
                'Car dealership ']

transp_warehouse = ['Distribution', 'Distribution Center', 'Potato Warehouse', 'Factory/Warehouse',
                    'Food distributor', 'Warehouse Distribution', 'Agricultural and Manufactured food facility',
                    'Produce Repack Warehouse/Distribution', 'Pipe distributor', 'Food Distribution', 'Warehouse',
                    'Mail distribution center']

prof_serv_mgmt = ['Maintenance Services', 'Waste management', 'Electrical Contractor',
                  'Distribution/Marketing Service', 'Landscaping company', 'Office/indoor workspace', 
                  'Bridge Tournament ', 'Cleaning Company', 'Fencing company', 'Landscaping', 
                  'Environmental Laboratory', 'House Painting Business', 'THC Laboratory', 'Gutters',
                  'Provides parts and technical assistance for rebar processing machines',
                  'Airport operations/support']

fin_ins_rs = ['Bank']

education = ['Educational Program', 'University']

HC_SA = ['Child care center', 'Healthcare, assisted living residence', 'Healthcare, skilled nursing facility',
        'Healthcare, combined care', 'Healthcare other', 'Healthcare, outpatient', 'Independent Living Facility',
        'Group home', 'Healthcare, dialysis', 'Residential Care Facility',
        'Personal Care Alternative (PCA) staffed apartment', 'Congregate shelter','OBGYN Clinic',
        'Opioid Treatment Facility', 'Shelter', 'Adult group home', 'Rehab center',
        'Inpatient rehabilitation', 'Hospice ', 'Assisted living and memory care', 'Dental Office',
        'Behavioral health', 'Rehab and Senior Living', 'Homeless shelter', 'assisted living and memory care',
        'Community correctional facility', 'Rehab ', 'Skilled nursing, continuing care retirement community',
        'Youth shelter', 'Assisted living & independent living ', 'Inpatient psychiatry']

A_E = []

hospitality = ['Restaurant  fast food', 'Hotel/lodge/resort', 'Restaurant sit down',
             'Restaurant other or unknown type', 'Beauty Salon', 'Laundry Services',
            'Camp', 'Pool/water park', 'Laundry Services', 'Hot Spring/Spa', 'Bakery ',
            'Bakery', 'Steam Laundry', 'Restaurant/Adult Entertainment', 'Ice Cream', 
            'Copper Mountain Employee Housing', 'Recreation Facility and Restaurant',
            ]

other_service = ['Workplace, no store front, in homes']

# add values to Industry column
industries = ['AFFH', 'Mining/O&G', 'Utilities',
             'Manufacturing', 'Government', 'Construction', 
             'Comm/Info', 'Wholesale Trade', 'Retail Trade',
             'Transp/Warehouse', 'Prof Serv and Mgmt',
             'Fin/Ins/RS', 'Education',
             'HC and SA', 'A&E', 'Hospitality','Other Service']

industry_lists = [AFFH, mining_og, utilities, manufacturing, government, construction, comminfo, wholsale_trade,
                  retail_trade, transp_warehouse, prof_serv_mgmt, fin_ins_rs, education, HC_SA, A_E, 
                  hospitality, other_service]
# print(len(industries), len(industry_lists))

for i in range(len(industries)):
    values_to_column(covidWeeklyDF, industry_lists[i], industries[i], 3, 5)
for i in range(len(industries)):
    values_to_column(covidWeeklyDF, industry_lists[i], industries[i], 4, 5)

# print(covidWeeklyDF[['Setting type', 'If setting type is other, specify', 'Industry']].head(20))

industries_df = create_df(industry_lists, industries)


covidWeeklyDF.to_csv('../data/updated_table.csv')




























# settingTypeList = covidWeeklyDF['Setting type'].unique()
# pd.DataFrame(settingTypeList).to_csv('../data/setting-types.csv')
# otherSetting = covidWeeklyDF['If setting type is other, specify'].unique()
# pd.DataFrame(otherSetting).to_csv('../data/other-setting-types.csv')
# nanValues = covidWeeklyDF[covidWeeklyDF['If setting type is other, specify'] == 'nan']
# print(nanValues.info())
# counties = covidWeeklyDF['Colorado county (exposure location)'].unique()
# countyGroup = covidWeeklyDF.groupby('Colorado county (exposure location)').sum().copy().reset_index()



# fig, ax = plt.subplots(figsize=(12,12))
# tickLoc = np.arange(len(counties))
# xLabel = countyGroup.iloc[:, 0]
# ax.bar(tickLoc, countyGroup['Number of COVID-19 deaths (lab confirmed/confirmed)'])
# ax.set_xticks(ticks=tickLoc)
# ax.set_xticklabels([str(x) for x in xLabel], rotation=90)
# ax.set_title('Lab Confirmed Deaths by County', fontsize=25)
# ax.set_ylabel('Deaths', fontsize=18)




# plt.show()

# settingTypeGrp = covidWeeklyDF.groupby('Setting type').sum().copy().reset_index()

# print(settingTypeGrp.info())

# fig, ax = plt.subplots(figsize=(12,15))
# tickLoc = np.arange(len(settingTypeGrp.iloc[:,0]))
# xLabel = settingTypeGrp.iloc[:, 0]
# ax.bar(tickLoc, settingTypeGrp['Number of COVID-19 deaths (lab confirmed/confirmed)'])
# ax.set_xticks(ticks=tickLoc)
# ax.set_xticklabels([str(x) for x in xLabel], rotation=90)
# ax.set_title('Lab Confirmed Deaths by Setting', fontsize=25)
# ax.set_ylabel('Deaths', fontsize=18)

# plt.show()

# x = covidWeeklyDF.columns.values.tolist()
# for val in x:
#     print(val)






# 'Mining': [], 'Utilities': [], 'Construction':['Construction Site'],
#              'Manufacturing':[], 'Wholesale Trade': [], 'Retail Trade': []}

